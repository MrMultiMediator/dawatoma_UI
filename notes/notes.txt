Make it so that connected grid elements (i.e. elements that are part of a note and hence
connected to other grid elements in the piano roll) do NOT have colored borders between
them and the elements they are connected to.

A piano roll grid element (PRGE) is a point in note, time space corresponding to a single note,
and a time duration of 0.25 beats.

1.) Clicking a PRGE where there is no actively set note should create an active note at
    that point in time.
2.) Clicking and holding a PRGE where there is no actively set note should create an active
    note at that point in time, as well as make it movable for as long as the note is held.
    It will move in quarter-beat increments.
3.) Clicking and holding the rightmost edge of an active note will activat the resizer.
4.) An active resizer means that if the user slides the mouse forward and/or backward, the note
    associated with the resizer will be resized accordingly, snapping to the nearest quarter beat
    to the cursor.
5.) Middle clicking an active note will delete it from the piano roll.
6.) Clicking and holding the body of an active note will make it movable. It will move in
    quarter-beat increments.


TODO for note stretching:

TODO for note deletion:
1.) Note gets deleted upon right click.
2.) Note numbers (indexes) get rewritten when one is deleted.

TODO for note moving:
1.) Make it so the note can't be moved off screen (mouseoff on whole piano roll?)



Cool/interesting things that I found during testing but never ended up using:
=========================================
piano_elements = piano[0].children
for (let i = 0; i < piano_elements.length; i++) {
    console.log(piano_elements[i].className != "g107_256")
    console.log(piano_elements[i].className != "g107_255")
}
// Check if the piano has any notes
//if (piano[0].querySelector('.note') != null)

//piano[0].classList.add("note");

console.log("TOP = ",parseInt(getComputedStyle(note).top))

// One way to change the location of a note
if (false) {qqq.style.top = (qqq.offsetTop + 16) + "px";}

// Another way to change the top location of a note
if (false) {qqq.style.top = (parseInt(getComputedStyle(qqq).top, 10) + 16) + "px";}

// Another way to change the location of a note
//qqq.style.top = "33px";

piano[0].removeChild(qqq)
=========================================